Q: 1
Develop a Finance Manager web application to track income, expenses, and savings. The app should include logical routing, modular components, dynamic state management, Firebase integration for data persistence, and user-friendly design. The goal is to create a comprehensive tool that provides detailed financial insights and management capabilities.

Problem Statement
You are tasked with creating a web application that enables users to manage their finances effectively. The application should include the following functionalities:

Core Functionalities
1. Home Route (/)
The dashboard of the application, providing an overview of:

Financial Summary:
Total Income, Total Expenses, Current Savings.
Savings Goal Progress: Display progress as a percentage or a progress bar.
Data Analytics:
Most Frequent Expense Category by Month
Most Expensive Expense Category by Month
Average Monthly Income and Expenses.
Quick Links:
Navigation buttons or links to other routes (/income, /expenses, /transactions, /savings).
2. Income Route (/income)
Form to Add Income:
Fields: Amount, Description, Date.
On submission, the income data should persist in Firebase.
Income List:
Display all income entries.
Dynamically update the list when new entries are added.
3. Expenses Route (/expenses)
Form to Add Expenses:
Fields: Amount, Description, Category, Date.
On submission, the expense data should persist in Firebase.
Expense List:
Display all expense entries.
Dynamically update the list when new entries are added.
4. Transactions Route (/transactions)
Unified Transaction List:
Display all transactions (Income and Expenses) in one list.
Sorting and Filtering:
Sort by Type (Income/Expense), Amount, Date.
Filter by Transaction Type, Category, or Date Range.
Delete Transactions:
Allow users to delete any transaction.
Ensure real-time updates to Firebase and reflect the changes across other routes (e.g., Home, Savings).
5. Savings Route (/savings)
Savings Calculation:
Display current savings dynamically as:
Current Savings = Total Income - Total Expenses
Set Savings Goal:
Allow the user to input a target savings goal.
Savings Progress Visualization:
Show progress toward the savings goal using a progress bar or percentage.
Detailed Breakdown:
Display how savings are calculated, including income and expense trends.
Additional Requirements
Routing:
Use React Router to implement logical navigation between pages.
Include a fallback route for invalid URLs (optional).
State Management:
Use React state (e.g., useState, useContext) to manage transactions, savings, and user inputs globally.
Firebase Integration:
Use Firebase to persist all transaction data.
Real-time sync: Ensure updates reflect across all pages without refreshing.
UI/UX:
Design a responsive and accessible interface.
Provide clear visual feedback for user actions (e.g., success/error messages)
